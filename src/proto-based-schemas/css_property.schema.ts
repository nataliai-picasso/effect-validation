import { Schema } from 'effect';

// Generated schemas for CSS property validation in css_property.proto
// Source: /Users/nataliai/Projects/test/effect/src/proto/css_property.proto
// Generated on: 2025-10-05T19:36:59.134Z
// 
// This file includes custom validation for CSS properties structure where statesDefaultValues cannot be empty.
// DO NOT EDIT THIS FILE MANUALLY - it will be regenerated on build.

// Enhanced schema for cssProperties structure validation
// This validates the entire cssProperties object structure: cssProperties.{key}.statesDefaultValues cannot be empty (if present)
export const CssPropertiesSchema = Schema.Record({
  key: Schema.String,
  value: Schema.Struct({
    statesDefaultValues: Schema.Record({
      key: Schema.String,
      value: Schema.Unknown
    }).pipe(Schema.filter((record) => Object.keys(record).length > 0, {
      message: () => "statesDefaultValues cannot be empty"
    }))
  })
});

// Enhanced schema for cssCustomProperties structure validation
// This validates the entire cssCustomProperties object structure: cssCustomProperties.{key}.statesDefaultValues cannot be empty (if present)
export const CssCustomPropertiesSchema = Schema.Record({
  key: Schema.String,
  value: Schema.Struct({
    statesDefaultValues: Schema.Record({
      key: Schema.String,
      value: Schema.Unknown
    }).pipe(Schema.filter((record) => Object.keys(record).length > 0, {
      message: () => "statesDefaultValues cannot be empty"
    }))
  })
});

// Legacy schemas for backward compatibility (overriding css_property.schema.ts)
export const CssPropertyItemStates_default_valuesSchema = Schema.Record({
  key: Schema.String,
  value: Schema.Unknown
}).pipe(Schema.filter((record) => Object.keys(record).length > 0, {
  message: () => "states_default_values cannot be empty"
}));

export const CssCustomPropertyItemStates_default_valuesSchema = Schema.Record({
  key: Schema.String,
  value: Schema.Unknown
}).pipe(Schema.filter((record) => Object.keys(record).length > 0, {
  message: () => "states_default_values cannot be empty"
}));

export const CssPropertyItemDefaultsStates_default_valuesSchema = Schema.Record({
  key: Schema.String,
  value: Schema.Unknown
}).pipe(Schema.filter((record) => Object.keys(record).length > 0, {
  message: () => "states_default_values cannot be empty"
}));

export const CssPropertyItemDefinitionOverridesStates_default_valuesSchema = Schema.Record({
  key: Schema.String,
  value: Schema.Unknown
}).pipe(Schema.filter((record) => Object.keys(record).length > 0, {
  message: () => "states_default_values cannot be empty"
}));

// Type exports
export type CssProperties = Schema.Schema.Type<typeof CssPropertiesSchema>;
export type CssCustomProperties = Schema.Schema.Type<typeof CssCustomPropertiesSchema>;
export type CssPropertyItemStates_default_values = Schema.Schema.Type<typeof CssPropertyItemStates_default_valuesSchema>;
export type CssCustomPropertyItemStates_default_values = Schema.Schema.Type<typeof CssCustomPropertyItemStates_default_valuesSchema>;
export type CssPropertyItemDefaultsStates_default_values = Schema.Schema.Type<typeof CssPropertyItemDefaultsStates_default_valuesSchema>;
export type CssPropertyItemDefinitionOverridesStates_default_values = Schema.Schema.Type<typeof CssPropertyItemDefinitionOverridesStates_default_valuesSchema>;
